// Generated by CoffeeScript 1.11.1
(function() {
  var apply_force, apply_forces, apply_friction, attractor_attraction, chaser_attraction, detect_end, detect_hits, ep, get_pairs, get_random_color, get_sprite_group, get_time, get_types, hit, init_colors, init_listeners, init_mobs, init_sprite, init_sprites, mob_repulsion, move_dante, move_sprites, repulsor_repulsion, runner_repulsion, size, spawn_mob, update_sprites, zero_forces,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.init_game = function(w, h) {
    var game_objs, n;
    n = 1;
    game_objs = {
      sprites: init_sprites(w, h),
      forces: [["runner", "runner", mob_repulsion], ["runner", "chaser", mob_repulsion], ["chaser", "runner", mob_repulsion], ["chaser", "chaser", mob_repulsion], ["runner", "player", runner_repulsion], ["chaser", "player", chaser_attraction], ["runner", "chaser", chaser_attraction], ["chaser", "repulsor", repulsor_repulsion], ["runner", "repulsor", runner_repulsion], ["runner", "attractor", attractor_attraction], ["chaser", "attractor", attractor_attraction]],
      colors: init_colors(),
      'chaser: \'#f268bd\'\nrunner: \'#68cdf2\'\nrepulsor: \'#997777\'\nattractor: \'#ff880a\'': 'chaser: \'#f268bd\'\nrunner: \'#68cdf2\'\nrepulsor: \'#997777\'\nattractor: \'#ff880a\'',
      start: get_time(),
      w: w,
      h: h,
      mouseX: w / 2,
      mouseY: h / 2,
      friction: 0.95,
      max_r: 40,
      score: 0,
      t: 0,
      hit_ctr: 0,
      n_run: n,
      max_run: n,
      n_mobs: 0
    };
    init_mobs(game_objs, 3, 'rand', 'chaser');
    init_mobs(game_objs, game_objs.n_run, 'rand', 'runner');
    init_listeners(game_objs);
    return game_objs;
  };

  init_colors = function() {
    return {
      chaser: get_random_color(),
      runner: get_random_color(),
      repulsor: get_random_color(),
      attractor: get_random_color()
    };
  };

  init_listeners = function(go) {
    var handler;
    handler = function(e) {
      if (e.keyCode === 32) {
        spawn_mob(go, 'repulsor');
      }
      if (e.keyCode === 102) {
        spawn_mob(go, 'chaser');
      }
      if (e.keyCode === 100) {
        spawn_mob(go, 'attractor');
      }
      if (e.keyCode === 115) {
        return spawn_mob(go, 'repulsor');
      }
    };
    return $(document).keypress(handler);
  };

  init_mobs = function(go, n, m, t) {
    var c, cx, cy, i, j, r, ref, ref1, results;
    c = go.colors[t];
    results = [];
    for (i = j = 1, ref = n; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
      if (m === 'rand') {
        ref1 = [go.w * Math.random(), go.h * Math.random()], cx = ref1[0], cy = ref1[1];
        r = Math.random() * go.max_r + 5;
      } else {
        console.log('no mode set');
      }
      results.push(go.sprites[t + '_' + i] = init_sprite(cx, cy, r, c, t));
    }
    return results;
  };

  init_sprites = function(w, h) {
    return {
      dante: init_sprite(w / 2, h / 2, 30, "black", "player"),
      hit: init_sprite(w / 2, h / 2, 30, "transparent", "hit")
    };
  };

  ep = 0.0000001;

  mob_repulsion = function(go, d) {
    return 1 * Math.pow(1 / (d + ep), 1 / 2) * 0.4;
  };

  runner_repulsion = function(go, d) {
    return 0.6;
  };

  chaser_attraction = function(go, d) {
    return -0.3;
  };

  repulsor_repulsion = function(go, d) {
    return Math.pow(1 / (d / 10 + ep), 1 / 2) * 0.4;
  };

  attractor_attraction = function(go, d) {
    return -0.3;
  };

  size = function(go) {
    return point_distance(0, 0, go.w, go.w);
  };

  window.update = function(game_objs) {
    game_objs.t += 1;
    game_objs.hit_ctr--;
    detect_end(game_objs);
    update_sprites(game_objs);
    apply_forces(game_objs);
    apply_friction(game_objs);
    move_dante(game_objs);
    move_sprites(game_objs);
    return detect_hits(game_objs);
  };

  update_sprites = function(go) {
    var name, ref, results, sprite, sprites;
    sprites = go.sprites;
    results = [];
    for (name in sprites) {
      sprite = sprites[name];
      if ((ref = sprite.type) === 'repulsor' || ref === 'attractor') {
        sprite.r -= 0.1;
      }
      if (sprite.r < 0) {
        results.push(delete sprites[name]);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  spawn_mob = function(go, t) {
    var i, mp, p;
    p = go.sprites.dante;
    i = Object.keys(go.sprites).length;
    mp = {
      chaser: [Math.random() * go.max_r + 5, go.colors[t]],
      repulsor: [go.max_r * 2, go.colors[t]],
      attractor: [go.max_r * 2, go.colors[t]],
      hit: [1, go.hit_img]
    };
    return go.sprites[t + '_' + i] = init_sprite(p.cx, p.cy, mp[t][0], mp[t][1], t);
  };

  detect_end = function(go) {
    var test_pairs;
    test_pairs = get_pairs(go, 'runner', 'chaser');
    if (!go.n_run) {
      go.sprites = init_sprites(go.w, go.h);
      go.colors = init_colors();
      go.max_run = Math.ceil(go.max_run * 1.18);
      go.n_run = go.max_run;
      init_mobs(go, 3, 'rand', 'chaser');
      init_mobs(go, go.n_run, 'rand', 'runner');
      return init_graphics(go);
    }
  };

  detect_hits = function(go) {
    var d, name, p, ref, ref1, results, sprite, sprites, x1, x2, y1, y2;
    sprites = go.sprites;
    p = go.sprites.dante;
    results = [];
    for (name in sprites) {
      sprite = sprites[name];
      ref = [sprite.cx, sprite.cy, p.cx, p.cy], x1 = ref[0], y1 = ref[1], x2 = ref[2], y2 = ref[3];
      d = point_distance(x1, y1, x2, y2);
      if (d < (sprite.r / 2 + p.r / 2) && (name !== 'dante' && name !== 'hit') && ((ref1 = sprite.type) !== 'hit' && ref1 !== 'attractor' && ref1 !== 'repulsor')) {
        results.push(hit(go, sprite));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  hit = function(go, sprite) {
    var p;
    if (go.hit_ctr <= 0) {
      go.hit_img = sprite.img;
      go.hit_ctr = 4;
    }
    if (sprite.type === 'runner') {
      sprite.type = 'chaser';
      sprite.img = go.colors.chaser;
      go.n_run--;
      go.sprites.dante.r += 5;
      go.score += 5;
    }
    if (sprite.type === 'chaser') {
      p = go.sprites.dante;
      if (p.r > 5) {
        p.r--;
      }
      return go.score--;
    }
  };

  zero_forces = function(game_objs) {
    var name, results;
    results = [];
    for (name in game_objs['sprites']) {
      game_objs['sprites'][name]['dvx'] = 0;
      results.push(game_objs['sprites'][name]['dvy'] = 0);
    }
    return results;
  };

  get_pairs = function(game_objs, from_node, to_node) {
    var fn, from_nodes, j, k, len, len1, pairs, tn, to_nodes, types;
    types = get_types(game_objs);
    if (indexOf.call(types, from_node) >= 0) {
      from_nodes = get_sprite_group(game_objs, from_node);
    } else {
      from_nodes = [game_objs['sprites'][from_node]];
    }
    if (indexOf.call(types, to_node) >= 0) {
      to_nodes = get_sprite_group(game_objs, to_node);
    } else {
      to_nodes = [game_objs['sprites'][from_node]];
    }
    pairs = [];
    for (j = 0, len = to_nodes.length; j < len; j++) {
      tn = to_nodes[j];
      for (k = 0, len1 = from_nodes.length; k < len1; k++) {
        fn = from_nodes[k];
        if (tn !== fn) {
          pairs.push([fn, tn]);
        }
      }
    }
    return pairs;
  };

  apply_force = function(game_objs, pair, force) {
    var d, dx, dy, f, v1, v2;
    v1 = pair[0];
    v2 = pair[1];
    d = point_distance(v1.cx, v1.cy, v2.cx, v2.cy);
    dx = v1.cx - v2.cx;
    dy = v1.cy - v2.cy;
    d += 0.0000001;
    f = force(game_objs, d);
    v1.dvx += dx / d * f;
    return v1.dvy += dy / d * f;
  };

  apply_forces = function(game_objs) {
    var f, forces, j, len, pair, pairs, results;
    zero_forces(game_objs);
    forces = game_objs['forces'];
    results = [];
    for (j = 0, len = forces.length; j < len; j++) {
      f = forces[j];
      pairs = get_pairs(game_objs, f[0], f[1]);
      results.push((function() {
        var k, len1, results1;
        results1 = [];
        for (k = 0, len1 = pairs.length; k < len1; k++) {
          pair = pairs[k];
          if ((pair[0] != null) && (pair[1] != null)) {
            results1.push(apply_force(game_objs, pair, f[2]));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      })());
    }
    return results;
  };

  apply_friction = function(go) {
    var name, results, sprite, sprites;
    sprites = go['sprites'];
    results = [];
    for (name in sprites) {
      sprite = sprites[name];
      sprite.vx *= go.friction;
      results.push(sprite.vy *= go.friction);
    }
    return results;
  };

  get_types = function(game_objs) {
    var sprite, t, types;
    types = [];
    for (sprite in game_objs["sprites"]) {
      t = game_objs["sprites"][sprite]["type"];
      if (types.indexOf(t) !== 0) {
        types.push(t);
      }
    }
    return types;
  };

  get_sprite_group = function(game_objs, group_type) {
    var group, name, sprite;
    group = [];
    for (name in game_objs["sprites"]) {
      sprite = game_objs["sprites"][name];
      if (sprite["type"] === group_type) {
        group.push(sprite);
      }
    }
    return group;
  };

  get_time = function() {
    var d;
    d = new Date();
    return d.getTime();
  };

  init_sprite = function(cx, cy, r, img, type) {
    return {
      cx: cx,
      cy: cy,
      r: r,
      img: img,
      type: type,
      dvx: 0,
      dvy: 0,
      vx: 0,
      vy: 0
    };
  };

  move_dante = function(game_objs) {
    var dante;
    dante = game_objs["sprites"]["dante"];
    dante["cx"] = game_objs["mouseX"];
    return dante["cy"] = game_objs["mouseY"];
  };

  move_sprites = function(game_objs) {
    var name, results, sprite, sprites;
    sprites = game_objs['sprites'];
    results = [];
    for (name in sprites) {
      sprite = sprites[name];
      sprite['vx'] += sprite['dvx'];
      sprite['vy'] += sprite['dvy'];
      sprite['cx'] += sprite['vx'];
      sprite['cy'] += sprite['vy'];
      sprite.dvx = 0;
      results.push(sprite.dvy = 0);
    }
    return results;
  };

  get_random_color = function() {
    var color, i, letters;
    letters = '0123456789ABCDEF';
    color = '#';
    i = 0;
    while (i < 6) {
      color += letters[Math.floor(Math.random() * 16)];
      i++;
    }
    return color;
  };

}).call(this);
